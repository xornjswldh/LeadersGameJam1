local OPTION_BTN
local CHARACTER_LIST_BTN
local CARD_LIST_BTN
local OPTION
local OPTION_CROSS
local BGM_BTN
local BGM_GAUGE
local SFX_BTN
local SFX_GAUGE
local GAUGE_MAX=320
local GAUGE_MIN=0
local CHARACTER_LIST
local CARD_LIST
local GM="main:/game_manager"
local TOUCHCOLL ="/touch#collisionobject"
local TOUCH = "/touch"
local RED = vmath.vector4(1,0,0,1)
local WHITE = vmath.vector4(1,1,1,1)
local BLUE = vmath.vector4(0,0,1,1)
local WHITEBLUE = vmath.vector4(0.5,0.5,1,1)

function init(self)
	msg.post(".", "acquire_input_focus")
	OPTION_BTN = gui.get_node("option_btn")
	CHARACTER_LIST_BTN =gui.get_node("character_list_btn")
	CARD_LIST_BTN = gui.get_node("card_list_btn")
	OPTION=gui.get_node("option/window")
	OPTION_CROSS=gui.get_node("option/cross")
	BGM_BTN=gui.get_node("option/bgm_btn")
	BGM_GAUGE=gui.get_node("option/bgm_gauge")
	SFX_BTN=gui.get_node("option/sfx_btn")
	SFX_GAUGE=gui.get_node("option/sfx_gauge")
	gui.set_enabled(OPTION, false)
	self.bgm=160
	self.sfx=160
	
end

function on_message(self, message_id, message, sender)
	if message_id==hash("destroy") then
		msg.post(".", "acquire_input_focus")
		msg.post(TOUCHCOLL, "enable")
		msg.post(TOUCH, "acquire_input_focus")
	end
end

function on_input(self, action_id, action)
	local action_pos = vmath.vector3(action.x, action.y,0)
	if not action_id then
		if gui.pick_node(CHARACTER_LIST_BTN, action.x, action.y) then
			gui.set_color(CHARACTER_LIST_BTN, WHITEBLUE)
		else
			gui.set_color(CHARACTER_LIST_BTN, WHITE)
		end
		
		if gui.pick_node(OPTION_BTN, action.x, action.y) then
			gui.set_color(OPTION_BTN, WHITEBLUE)
		else
			gui.set_color(OPTION_BTN, WHITE)
		end
		if gui.pick_node(OPTION_CROSS, action.x, action.y) then
			gui.set_color(OPTION_CROSS, WHITEBLUE)
		else
			gui.set_color(OPTION_CROSS, WHITE)
		end
		if gui.pick_node(CARD_LIST_BTN, action.x, action.y) then
			gui.set_color(CARD_LIST_BTN, WHITEBLUE)
		else
			gui.set_color(CARD_LIST_BTN, WHITE)
		end
	end

	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(BGM_BTN, action.x, action.y) then
			gui.set_color(BGM_BTN, WHITEBLUE)
			self.bgm_pressed=gui.get_screen_position(BGM_BTN)
			self.bgm = gui.get_position(BGM_BTN).x
		end
		if gui.pick_node(SFX_BTN, action.x, action.y) then
			gui.set_color(SFX_BTN, WHITEBLUE)
			self.sfx_pressed=gui.get_screen_position(SFX_BTN)
			self.sfx = gui.get_position(SFX_BTN).x
		end
		if gui.pick_node(OPTION_BTN, action.x, action.y) then
			gui.set_enabled(OPTION, true)
			msg.post(TOUCHCOLL, "disable")
			msg.post(TOUCH, "release_input_focus")
		end
		if gui.pick_node(CARD_LIST_BTN, action.x, action.y) then
			gui.set_enabled(OPTION, false)
			msg.post(".", "release_input_focus")
			factory.create("#card_list")
			msg.post(TOUCHCOLL, "disable")
			msg.post(TOUCH, "release_input_focus")
		end
		
		if gui.pick_node(CHARACTER_LIST_BTN, action.x, action.y) then
			gui.set_enabled(OPTION, false)
			msg.post(".", "release_input_focus")
			factory.create("#character_list")
			msg.post(TOUCHCOLL, "disable")
			msg.post(TOUCH, "release_input_focus")
		end
		
		if gui.pick_node(OPTION_CROSS, action.x, action.y) then
			gui.set_enabled(OPTION, false)
			msg.post(TOUCHCOLL, "enable")
			msg.post(TOUCH, "acquire_input_focus")
		end
	end
	if action_id == hash("touch") then
		if self.bgm_pressed then
			local pos = gui.get_position(BGM_BTN)
			local size = gui.get_size(BGM_GAUGE)
			pos.x=self.bgm+action_pos.x-self.bgm_pressed.x
			size.x=pos.x
			if pos.x<GAUGE_MAX and pos.x>=GAUGE_MIN then 
				gui.set_position(BGM_BTN,pos)
				gui.set_size(BGM_GAUGE, size)
			end
		end 
		if self.sfx_pressed then
			local pos = gui.get_position(SFX_BTN)
			local size = gui.get_size(SFX_GAUGE)
			pos.x=self.sfx+action_pos.x-self.sfx_pressed.x
			size.x=pos.x
			if pos.x<GAUGE_MAX and pos.x>=GAUGE_MIN then 
				gui.set_position(SFX_BTN,pos)
				gui.set_size(SFX_GAUGE, size)
			end
		end 
	end

	if action_id == hash("touch") and action.released then
		gui.set_color(BGM_BTN, WHITE)
		gui.set_color(SFX_BTN, WHITE)
		msg.post(GM, "sound",{bgm=self.bgm,sfx=self.sfx})
		self.bgm_pressed=nil
		self.sfx_pressed=nil
	end
	if action_id==hash("menu") and action.pressed  then
		
			gui.set_enabled(OPTION, false)
			msg.post(".", "release_input_focus")
			local exit = factory.create("#exit_menu",nil,nil)
			msg.post(exit, "creator",{creator=msg.url()})
			msg.post(TOUCHCOLL, "disable")
			msg.post(TOUCH, "release_input_focus")
	
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
